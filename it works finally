local Rayfield = loadstring(game:HttpGet('https:https://raw.githubusercontent.com/Levim87/Idkm87/refs/heads/main/custom%20Rayfield'))()

local Window = Rayfield:MakeWindow({
    Name = "Hex",
    HidePremium = false,
    SaveConfig = true,
    ConfigFolder = "Rayfield"
})

local MainTab = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Tab = Window:MakeTab({
    Name = "Skills",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local function createToggle(name, skill)
    Tab:AddToggle({
        Name = name,
        Default = false,
        Callback = function(Value)
            game:GetService("ReplicatedStorage").Remotes.Server.Combat.Skill:FireServer(skill)
            print(name .. " toggle: " .. tostring(Value))
        end
    })
end

local function createQuestButton(name, questData)
    LvlTab:AddButton({
        Name = name,
        Callback = function()
            game:GetService("ReplicatedStorage").Remotes.Server.Data.TakeQuest:InvokeServer(questData)
            print(name .. " quest button pressed.")
        end
    })
end


local skills = {
    { "Domain", "Domain Expansion: Unlimited Void" },
    { "Hollow Purple", "Infinity: Hollow Purple" },
    { "Infinity Red", "Infinity: Reversal Red" },
    { "Infinity Blue", "Infinity: Lapse Blue" },
    { "Six Eyes", "Maximum: Six Eyes" },
    { "Infinity Pummel", "Infinity: Spatial Pummel" },
    { "Red Transformation", "Infinity: Red Transmission" },
    { "Infinity Mugen", "Infinity: Mugen" },
    { "Coffin Of The Iron Mountain", "Domain Expansion: Coffin Of The Iron Mountain" },
    { "Volcano: Fissure", "Volcano: Fissure" },
    { "Maximum: Meteor", "Maximum: Meteor" },
    { "Volcano: Molten Chamber", "Volcano: Molten Chamber" },
    { "Volcano: Eruption", "Volcano: Eruption" },
    { "Volcano: Ember Insects", "Volcano: Ember Insects" },
    { "Volcano: Molten Palm", "Volcano: Molten Palm" },
}


for _, skillData in ipairs(skills) do
    createToggle(skillData[1], skillData[2])
end


Tab:AddToggle({
    Name = "Kill Aura",
    Default = false,
    Callback = function(Value)
        if Value then
            local CustomDistance = _G.CustomDistance or 2000
            local plr = game.Players.LocalPlayer

            
            local function TP(Pos)
                if plr and Pos then
                    local character = plr.Character
                    if character and character:FindFirstChild("HumanoidRootPart") and character:FindFirstChild("Humanoid") then
                        if character.Humanoid.Health > 0 then
                            character.HumanoidRootPart.CFrame = Pos
                        end
                    end
                end
            end

            
            spawn(function()
                while wait() do
                    for _, v in pairs(game.Workspace.Objects.Mobs:GetChildren()) do
                        if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                            if (v.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude <= CustomDistance then
                                sethiddenproperty(plr, "SimulationRadius", math.huge)
                                v.Humanoid.Health = 0
                            end
                        end
                    end
                end
            end)

            
            spawn(function()
                while wait() do
                    for _, v in pairs(game.Workspace.Objects.Mobs:GetChildren()) do
                        if v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                            if (v.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude <= CustomDistance then
                                TP(v.HumanoidRootPart.CFrame)
                                v.HumanoidRootPart.CanCollide = true
                                if v.Humanoid:FindFirstChild("Animator") then
                                    v.Humanoid.Animator:Destroy()
                                end
                                sethiddenproperty(plr, "SimulationRadius", math.huge)
                                v.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                                v.Humanoid.JumpPower = 0
                                v.Humanoid.WalkSpeed = 0
                            end
                        end
                    end
                end
            end)
        else
            print("Kill Aura disabled.")
        end
    end
})

local AutotCollectChestToggle = MainTab:AddToggle({
    Name = "Auto Collect Chest",
    Default = false,
    Save = true,
    Flag = "AutoCollectChest" -- Identifier for the toggle
})

-- Chest collection counter
local ChestsCollected = 0

-- Function to activate chest
local function activateChest()
    local chest = workspace:FindFirstChild("Objects") and workspace.Objects:FindFirstChild("Drops") and workspace.Objects.Drops:FindFirstChild("Chest")
    
    if chest then
        for i, v in pairs(chest:GetDescendants()) do
            if v:IsA("ProximityPrompt") then
                fireproximityprompt(v, 1, true)
            end
        end
        return true
    end
    return false
end

-- Function to check loot and chest status
local function checkLootAndChest()
    local player = game:GetService("Players").LocalPlayer
    local loot = player.PlayerGui:FindFirstChild("Loot")
    
    if loot and loot.Enabled then
        local button = player.PlayerGui.Loot.Frame.Flip
        game:GetService("GuiService").SelectedObject = button
        game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Return, false, game)
        game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.Return, false, game)
    else
        activateChest()
    end
end

-- Chest collection handler
local function setupChestCollectionHandler()
    pcall(function()
        game:GetService("ReplicatedStorage").Remotes.Client.CollectChest.OnClientInvoke = function(Chest)
            if Chest then
                ChestsCollected += 1
                print("Chest Collected. Total: " .. ChestsCollected)
            end
            return {}
        end
    end)
end

-- Automated loot flipping
local function openAndFlipLoot()
    local Drops = workspace:FindFirstChild("Objects") and workspace.Objects:FindFirstChild("Drops")
    local LootUI = game.Players.LocalPlayer.PlayerGui:FindFirstChild("Loot")

    while Drops:FindFirstChild("Chest") or (LootUI and LootUI.Enabled) do
        if LootUI and not LootUI.Enabled then
            activateChest()
        else
            repeat
                local Flip = LootUI.Frame:FindFirstChild("Flip")
                if Flip then
                    game:GetService("GuiService").SelectedObject = Flip
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                end
            until not LootUI.Enabled
        end
        task.wait()
    end
end

-- Main toggle logic
game:GetService("RunService").Heartbeat:Connect(function()
    if OrionLib.Flags["AutoCollectChest"].Value then
        checkLootAndChest()
    end
end)

-- Initialize chest collection handler
setupChestCollectionHandler()

-- Start the loot collection logic
task.spawn(function()
    openAndFlipLoot()
end)

-- Wait for all chests to be processed
task.spawn(function()
    local Drops = workspace:FindFirstChild("Objects") and workspace.Objects:FindFirstChild("Drops")
    local LootUI = game.Players.LocalPlayer.PlayerGui:FindFirstChild("Loot")

    repeat
        task.wait()
    until not (Drops:FindFirstChild("Chest") or (LootUI and LootUI.Enabled))
end)

local PromoteToggle = MainTab:AddToggle({
    Name = "Auto Promote",
    Default = false,
    Callback = function(Value)
        getgenv().instantPromote = Value
        print("Auto Promote toggled: " .. tostring(Value))

        if Value then
            task.spawn(function()
                while getgenv().instantPromote do
                    task.wait(0.1)
                    local ohString1 = "Clan Head Jujutsu High"
                    local ohString2 = "Promote"
                    
                    pcall(function()
                        game:GetService("ReplicatedStorage").Remotes.Server.Dialogue.GetResponse:InvokeServer(ohString1, ohString2)
                    end)
                end
            end)
        end
    end
})

getgenv().Bring = false
getgenv().AutoTalisman = false

local distanciaLimite = 100
local distanciaMinima = 5

local BringMobsSection = MainTab:AddSection({ Name = "Bring Mobs" })

local DistanciaMaxSlider = BringMobsSection:AddSlider({
    Name = "Max Bring Distance",
    Min = 30,
    Max = 300,
    Default = distanciaLimite,
    Increment = 1,
    Callback = function(Value)
        distanciaLimite = Value
    end
})

local DistanciaMinSlider = BringMobsSection:AddSlider({
    Name = "Distance From Player",
    Min = 1,
    Max = 50,
    Default = distanciaMinima,
    Increment = 1,
    Callback = function(Value)
        distanciaMinima = Value
    end
})

local BringMobsToggle = BringMobsSection:AddToggle({
    Name = "Bring Mobs",
    Default = false,
    Callback = function(Value)
        getgenv().Bring = Value
    end
})

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().Bring then
        local player = game.Players.LocalPlayer
        local humanoidRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        
        if humanoidRootPart then
            for _, mob in ipairs(workspace.Objects.Mobs:GetChildren()) do
                if mob:FindFirstChild("HumanoidRootPart") then
                    local distance = (mob.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
                    if distance < distanciaLimite then
                        mob.HumanoidRootPart.CanCollide = false
                        mob.HumanoidRootPart.CFrame = humanoidRootPart.CFrame + humanoidRootPart.CFrame.LookVector * distanciaMinima
                    end
                end
            end
        end
    end
end)

-- Toggle creation
local AutoRaid = MainTab:AddToggle({
    Name = "Auto Raid",
    Default = false,
    Save = true,
    Flag = "toggle",
    Callback = function(Value)
        if Value then
            local player = game:GetService("Players").LocalPlayer
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
            local bossSpawn = workspace.Objects.Spawns.BossSpawn
            humanoidRootPart.CFrame = bossSpawn.CFrame

            -- Ensuring the game is loaded
            repeat wait() until game:IsLoaded()
            repeat wait() until game:GetService("Players")
            repeat wait() until game:GetService("Players").LocalPlayer
            repeat wait() until game:GetService("Players").LocalPlayer.PlayerGui
            repeat wait() until game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

            local VirtualInputManager = game:GetService("VirtualInputManager")
            local Players = game:GetService("Players")
            local Workspace = game:GetService("Workspace")
            local plr = Players.LocalPlayer
            local CustomDistance = _G.CustomDistance or 2000

            -- Function to teleport the player to a given position
            local function TP(Pos)
                if not plr or not Pos then return end
                local character = plr.Character
                if character and character:FindFirstChild("HumanoidRootPart") and character:FindFirstChild("Humanoid") then
                    if character.Humanoid.Health > 0 then
                        character.HumanoidRootPart.CFrame = Pos
                    end
                end
            end

            -- Loop to attack and disable mobs within range
            spawn(function()
                while wait() do
                    for _, mob in pairs(Workspace.Objects.Mobs:GetChildren()) do
                        if mob:FindFirstChild("HumanoidRootPart") and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
                            local distance = (mob.HumanoidRootPart.Position - plr.Character.HumanoidRootPart.Position).Magnitude
                            if distance <= CustomDistance then
                                -- Teleport to mob
                                TP(mob.HumanoidRootPart.CFrame)

                                -- Disable mob actions
                                mob.HumanoidRootPart.CanCollide = true
                                mob.HumanoidRootPart.Size = Vector3.new(10, 10, 10)
                                mob.Humanoid.JumpPower = 0
                                mob.Humanoid.WalkSpeed = 0

                                -- Destroy the mob if in range
                                if mob.Humanoid:FindFirstChild("Animator") then
                                    mob.Humanoid.Animator:Destroy()
                                end

                                -- Set simulation radius to max for optimal performance
                                sethiddenproperty(plr, "SimulationRadius", math.huge)
                                mob.Humanoid.Health = 0
                            end
                        end
                    end
                end
            end)

            -- Integrating the ReadyReplay functionality
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local ReadyReplay = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("Client"):WaitForChild("ReadyReplay")

            -- Adding ReadyReplay remote to the player
            ReadyReplay.Parent = game.Players

            -- Delay to ensure everything is loaded before setting the function
            task.wait(1)

            -- Define the behavior when ReadyReplay is invoked
            ReadyReplay.OnClientInvoke = function()
                return true  -- Return true when the remote is called
            end
        end
    end
})

local AutoTalismanSection = MainTab:AddSection({ Name = "Auto Collect Drops" })

local AutoTalismanToggle = AutoTalismanSection:AddToggle({
    Name = "Enable Auto Collect",
    Default = false,
    Callback = function(Value)
        getgenv().AutoTalisman = Value
        if Value then
            task.spawn(function()
                while getgenv().AutoTalisman do
                    local items = workspace.Objects.Drops:GetChildren()
                    for _, item in ipairs(items) do
                        local collectPart = item:FindFirstChild("Collect")
                        local itemRoot = item:FindFirstChild("Root")
                        
                        if collectPart and itemRoot then
                            local humanoidRootPart = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                            if humanoidRootPart then
                                humanoidRootPart.CFrame = itemRoot.CFrame
                                wait(0.5)
                                for _, prompt in ipairs(item:GetDescendants()) do
                                    if prompt:IsA("ProximityPrompt") then
                                        fireproximityprompt(prompt)
                                    end
                                end
                            end
                        end
                    end
                    wait(1)
                end
            end)
        end
    end
})

local Section = Tab:AddSection({
    Name = "Skill Execution"
})

local userInput = ""


Section:AddTextbox({
    Name = "Enter Skill Argument",
    Default = "",
    TextDisappear = true,
    Callback = function(value)
        userInput = value -- Store the value entered in the TextBox
        print("User Input:", userInput)
    end
})


Section:AddButton({
    Name = "Execute Skill",
    Callback = function()
        if userInput ~= "" then
            -- Argument for the function
            local args = {
                [1] = userInput -- Use the value entered by the user
            }

            
            game:GetService("ReplicatedStorage").Remotes.Server.Combat.Skill:FireServer(unpack(args))
            print("Skill executed with argument:", userInput)
        else
            -- Error message if no input
            print("Please enter a valid argument.")
        end
    end
})


Rayfield:Init()

print("Script fully loaded.")
